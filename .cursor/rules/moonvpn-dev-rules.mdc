---
description: 
globs: 
alwaysApply: true
---
# MoonVPN Project Development Rules

This rule summarizes the core development practices for the MoonVPN project, ensuring consistency and adherence to the project's architecture.

## 1. Docker is Mandatory

- **ALL** operations (running the bot, database migrations, testing) **MUST** be performed inside Docker containers.
- Use the provided CLI tool `moonvpn` for managing Docker services.
- **NEVER** run `python`, `pip`, `alembic`, `uvicorn` directly on the host system.

## 2. Adhere to Project Structure

- All new code or modifications **MUST** comply with the structure defined in [docs/project-structure.md](mdc:docs/project-structure.md).
- Do not create files or directories outside the defined structure.

## 3. Core Documentation Reference

- Before starting any task, **ALWAYS** consult the following documents:
    - Project Structure: [docs/project-structure.md](mdc:docs/project-structure.md)
    - Requirements: [docs/project-requirements.md](mdc:docs/project-requirements.md)
    - Database Schema: [docs/database-structure.md](mdc:docs/database-structure.md)

## 4. Development Workflow

- **Code Changes**: Implement features or fixes according to the documentation.
- **Restart Services**: After any code change, run `moonvpn up` or `moonvpn restart` to apply the changes.
- **Check Logs**: Monitor application behavior using `moonvpn logs` or `moonvpn logs app`.

## 5. Database Migrations

- For any changes to database models (`db/models/`), generate and apply migrations using:
    - `moonvpn migrate` (This handles `alembic revision --autogenerate` and `alembic upgrade head` inside Docker).

## 6. Dependencies

- Manage Python dependencies using Poetry. Modify `pyproject.toml` and update the lock file if needed. Changes will be reflected in the Docker image upon rebuild (`moonvpn build` if necessary).

By following these rules, we maintain a clean, consistent, and Dockerized development environment for MoonVPN.
