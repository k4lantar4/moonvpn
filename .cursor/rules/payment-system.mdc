---
description: MoonVPN Payment System Guide
globs: 
alwaysApply: false
---
# üí∞ MoonVPN Payment System Guide

## üìù Payment Components Overview
The payment system consists of:

- [PaymentService](mdc:core/services/payment_service.py) - Core payment logic
- [Transaction Model](mdc:db/models/transaction.py) - Money movement tracking
- [BankCard Model](mdc:db/models/bank_card.py) - Payment cards configuration
- [ReceiptLog Model](mdc:db/models/receipt_log.py) - Payment receipts
- [Receipt Handlers](mdc:bot/receipts) - Bot receipt collection logic
- [Wallet Commands](mdc:bot/commands/wallet.py) - User balance interaction

## üß± Payment Flow
1. User initiates payment through `/wallet` or during purchase
2. System presents appropriate payment methods (card details)
3. User makes payment and submits receipt via bot
4. Receipt is logged in database and forwarded to admin channel
5. Admin approves/rejects via inline buttons
6. On approval, user wallet is credited and order processed

## ‚úÖ Payment Rules
1. All money movements MUST be recorded in transactions table
2. Balance is NEVER stored directly - always computed from transaction history
3. Receipts must have unique tracking codes (`RCPT-YYMMDD-XYZ`)
4. Bank card rotation follows configured policy (manual, interval, load_balance)
5. Receipt approval must be logged with admin ID and timestamp
6. Payment flows must be transactional and handle edge cases

## üß© Receipt Handling Pattern
```python
# BOT LAYER: Receipt collection
@router.message(F.photo, ReceiptState.waiting_for_photo)
async def handle_receipt_photo(message: Message, state: FSMContext):
    # Store photo_file_id and forward to payment service
    data = await state.get_data()
    
    # Call payment service to log receipt
    result = await payment_service.log_receipt(
        user_id=message.from_user.id,
        amount=data['amount'],
        photo_file_id=message.photo[-1].file_id,
        card_id=data['selected_card_id']
    )
    
    # Confirm to user
    await message.answer(f"Receipt received with tracking code: {result.tracking_code}")

# SERVICE LAYER: Receipt processing
async def log_receipt(self, user_id, amount, photo_file_id, card_id):
    # Create receipt record
    tracking_code = generate_tracking_code()
    receipt = await self.receipt_repository.create({
        'user_id': user_id,
        'amount': amount,
        'photo_file_id': photo_file_id,
        'card_id': card_id,
        'status': 'pending',
        'tracking_code': tracking_code,
        'submitted_at': datetime.now()
    })
    
    # Forward to admin channel
    await self.notification_service.send_receipt_to_admins(receipt)
    
    return receipt
```

## üìä Card-to-Card Flow
1. System selects appropriate card based on rotation policy
2. Card details presented to user with clear instructions
3. User makes transfer and captures receipt
4. Receipt includes: amount, date, reference number
5. Receipt stored with photo_file_id for later reference
6. Admin reviews and approves/rejects
7. On approval, balance credited to user's wallet

## üîÑ Wallet Operations
- Deposits (card-to-card)
- Purchases (debit from wallet)
- Refunds (credit to wallet)
- Balance check (computed from transactions)
