---
description: MoonVPN Core Services Guide
globs: 
alwaysApply: false
---
# üß† MoonVPN Core Services Guide

## üìù Services Overview
Core services contain all business logic and are the heart of the application:

- [UserService](mdc:core/services/user_service.py) - User management, profiles, roles
- [PlanService](mdc:core/services/plan_service.py) - Plan management, pricing, discounts
- [PanelService](mdc:core/services/panel_service.py) - Panel registration, sync, monitoring
- [ClientService](mdc:core/services/client_service.py) - VPN client account management
- [PaymentService](mdc:core/services/payment_service.py) - Wallet, transactions, receipts
- [NotificationService](mdc:core/services/notification_service.py) - Alerts system
- [OrderService](mdc:core/services/order_service.py) - Order processing and fulfillment

## ‚úÖ Service Layer Rules
1. Services must be **stateless** and **idempotent** where possible
2. Services should use repositories for data access
3. Services handle validation, business rules, and orchestration
4. Services must provide clear error messages and exceptions
5. Complex operations should be transactional when touching multiple tables

## üß© Common Service Pattern
```python
class ExampleService:
    def __init__(self, repository_a, repository_b, integration_client):
        self.repository_a = repository_a
        self.repository_b = repository_b
        self.integration_client = integration_client
    
    async def perform_complex_operation(self, user_id, data):
        # 1. Validation
        if not self._validate_data(data):
            raise ValidationError("Invalid data provided")
            
        # 2. Database operations via repositories
        entity_a = await self.repository_a.get_by_id(user_id)
        
        # 3. Business logic
        result = self._process_business_logic(entity_a, data)
        
        # 4. External integrations if needed
        await self.integration_client.update_remote_system(result)
        
        # 5. Persist changes
        await self.repository_b.save(result)
        
        return result
```

## üìä Service Responsibility Map
- **UserService**: User CRUD, role management, profile updates
- **PlanService**: Plan creation, pricing, discount application
- **PanelService**: Panel registration, health checks, system stats
- **ClientService**: VPN account creation, renewal, traffic tracking
- **PaymentService**: Wallet operations, receipt processing
- **NotificationService**: Notification dispatch, queueing, logging
- **OrderService**: Order workflow, status management, fulfillment

## üîÑ Integration Points
- Services interact with [XUI Client](mdc:core/integrations/xui_client.py) for panel operations
- Services use repositories for data access
- Services can call other services as needed (carefully manage dependencies)
- Services expose APIs to be called by bot handlers
