---
description: MoonVPN Testing Guidelines
globs: 
alwaysApply: false
---
# 🧪 MoonVPN Testing Guidelines

## 📝 Testing Overview
MoonVPN requires comprehensive testing for core functionality:

- [Unit Tests](mdc:tests) - Test individual services and repositories
- [Integration Tests](mdc:tests) - Test service interactions
- [Bot Command Tests](mdc:tests) - Verify bot command behavior

## 🧱 Test Structure
Tests are organized by module and functionality:

- `tests/test_services/` - Service layer tests
- `tests/test_repositories/` - Repository layer tests
- `tests/test_integrations/` - External API integration tests
- `tests/test_bot/` - Bot command and callback tests

## ✅ Testing Rules
1. Core business logic must have test coverage
2. Tests must be isolated and not rely on external services
3. Use mocks and fixtures for dependencies
4. Database tests must use transactions and roll back
5. Test both success and failure cases
6. Run tests using `moonvpn test` command only

## 🧩 Test Pattern Example
```python
# SERVICE LAYER TEST PATTERN
import pytest
from unittest.mock import AsyncMock, patch

class TestExampleService:
    @pytest.fixture
    def mock_repository(self):
        return AsyncMock()
        
    @pytest.fixture
    def service(self, mock_repository):
        return ExampleService(repository=mock_repository)
    
    async def test_get_item_success(self, service, mock_repository):
        # Arrange
        mock_repository.get_by_id.return_value = {"id": 1, "name": "Test"}
        
        # Act
        result = await service.get_item(1)
        
        # Assert
        assert result["name"] == "Test"
        mock_repository.get_by_id.assert_called_once_with(1)
    
    async def test_get_item_not_found(self, service, mock_repository):
        # Arrange
        mock_repository.get_by_id.return_value = None
        
        # Act/Assert
        with pytest.raises(NotFoundException):
            await service.get_item(1)
```

## 📊 Test Coverage Requirements
- **User Service**: Authentication, registration, profile management
- **Payment Service**: Wallet operations, receipt processing, balance calculation
- **Panel Service**: Panel sync, health checks, inbound management
- **Client Service**: Account creation, renewal, transfer, termination
- **Order Service**: Order processing flow, status transitions

## 🔄 Testing Workflow
1. Write tests before or alongside implementation
2. Run specific test: `moonvpn test tests/test_file.py::TestClass::test_method`
3. Run all tests: `moonvpn test`
4. Fix any failures before proceeding
5. Ensure consistent test behavior in CI/CD pipeline

## ⚠️ Common Test Issues
- Database state leakage between tests
- Missing mocks for external dependencies
- Tight coupling making tests brittle
- Insufficient error case testing
- Slow tests due to unnecessary database operations

## 💡 Testing Best Practices
- Use descriptive test names following the pattern `test_function_scenario_result`
- Separate test setup, execution, and verification (Arrange-Act-Assert)
- Mock external dependencies and services
- Use parametrized tests for similar test cases
- Keep tests fast and independent
