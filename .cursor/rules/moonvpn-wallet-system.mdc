---
description: 
globs: 
alwaysApply: false
---
# MoonVPN Wallet and Payment System

This rule outlines the structure and operation of the wallet and payment system in the MoonVPN project.

## 1. Wallet Components

The wallet system consists of these key components:

- [bot/commands/wallet.py](mdc:bot/commands/wallet.py): `/wallet` command implementation
- [bot/buttons/wallet_buttons.py](mdc:bot/buttons/wallet_buttons.py): Wallet-related inline buttons
- [bot/callbacks/wallet_callbacks.py](mdc:bot/callbacks/wallet_callbacks.py): Handlers for wallet button interactions
- [core/services/payment_service.py](mdc:core/services/payment_service.py): Business logic for payments and transactions
- [db/models/transaction.py](mdc:db/models/transaction.py): Transaction data model

## 2. Transaction Types

Transactions have the following types (defined in [db/models/transaction.py](mdc:db/models/transaction.py)):

- `DEPOSIT` / `PAYMENT`: Used for adding funds to the wallet (both values work for backward compatibility)
- `PURCHASE`: Used when buying a subscription plan
- `REFUND`: Used for refunding a user

## 3. Transaction States

Transactions flow through these states:

- `PENDING`: Initial state when a transaction is created
- `SUCCESS`: Transaction successfully completed
- `FAILED`: Transaction failed to complete

## 4. Wallet Flow Implementation

The wallet top-up flow follows this sequence:

1. User issues `/wallet` command → [wallet.py](mdc:bot/commands/wallet.py) displays balance and top-up button
2. User clicks "افزایش موجودی" → [wallet_callbacks.py](mdc:bot/callbacks/wallet_callbacks.py) prompts for amount
3. User enters an amount → validated and confirmation buttons shown
4. User confirms → transaction created with `PENDING` status
5. Admin manually verifies payment and updates transaction status
6. When status changes to `SUCCESS`, the user's balance is automatically updated

## 5. Implementation Notes

- Always use `datetime.now()` for `created_at` fields to prevent database errors
- Transaction creation must include explicit date values to avoid SQL errors
- Always validate amount inputs from users (minimum/maximum thresholds)
- Handle both `PAYMENT` and `DEPOSIT` types in business logic for compatibility
- Always ensure error messages are user-friendly and in Persian

## 6. PaymentService Methods

Key methods in [payment_service.py](mdc:core/services/payment_service.py) include:

- `get_user_balance(telegram_id)`: Get a user's current balance
- `create_transaction(user_id, amount, type, status)`: Create a new transaction
- `update_transaction_status(transaction_id, new_status)`: Update transaction status
- `get_payment_instructions()`: Get instructions for manual payment

By following these patterns, we maintain a consistent payment system that handles user transactions reliably.
