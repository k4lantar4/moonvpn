# 🌙 MoonVPN - قوانین هوش مصنوعی در Cursor IDE

## 📌 مقدمه
این قوانین برای هوش مصنوعی Cursor IDE در پروژه MoonVPN تنظیم شده‌اند تا اطمینان حاصل شود که همه توسعه و پیاده‌سازی مطابق با معماری مشخص‌شده انجام می‌شود. هوش مصنوعی باید به این قوانین به عنوان چارچوب اصلی برای کمک به توسعه‌دهنده پایبند باشد.

## 🚫 محدودیت‌های مطلق
- **هرگز فایل‌های پایتون را مستقیماً اجرا نکنید** - همیشه از ابزار خط فرمان `moonvpn` استفاده کنید
- **هرگز پکیج‌ها را به صورت سراسری نصب نکنید** - فقط از Docker استفاده کنید
- **هرگز فایل‌های `.env` یا تنظیمات دائمی را بدون درخواست صریح تغییر ندهید**
- **هرگز پوشه‌ها، ماژول‌ها یا فایل‌های جدید خارج از ساختار مجاز در `project-structure.md` ایجاد نکنید**
- **هرگز `TODO` یا نظراتی مانند `implement here` یا پیاده‌سازی‌های ناقص را باقی نگذارید**

## 📂 داکیومنت‌های کلیدی
قبل از هر تغییر یا پیاده‌سازی، این مستندات را بررسی کنید:
- `docs/project-requirements.md` - نیازمندی‌های پروژه
- `docs/project-structure.md` - ساختار فایل‌ها و پوشه‌ها
- `docs/database-structure.md` - ساختار پایگاه داده
- `docs/project-relationships.md` - روابط بین اجزای پروژه

## 🏗️ معماری لایه‌ای
MoonVPN از معماری لایه‌ای دقیق پیروی می‌کند:
```
کاربر ↔ ربات تلگرام ↔ سرویس‌ها ↔ ریپوزیتوری‌ها ↔ پایگاه داده ↔ API‌های خارجی (3x-ui)
```

## 🔍 فرآیند انجام هر وظیفه
1. **درک وظیفه**
   - مستندات را مطالعه کنید
   - درخواست کاربر را بررسی کنید
   - ماژول و فایل صحیح را تأیید کنید

2. **برنامه‌ریزی به زبان طبیعی یا شبه‌کد (اگر پیچیده است)**
   - در صورت نیاز، قبل از شروع کدنویسی یک طرح پیشنهاد دهید

3. **اجرا با استفاده از مکان‌های فایل صحیح**
   - ساختار پروژه و قراردادهای نام‌گذاری را دنبال کنید

4. **تست / اعتبارسنجی / تأیید خروجی**
   - کانتینرهای Docker را با استفاده از `moonvpn restart` راه‌اندازی مجدد کنید
   - تغییرات ربات یا پایگاه داده را به صورت زنده مشاهده کنید

5. **خلاصه‌سازی یا به‌روزرسانی کاربر به زبان فارسی**
   - لحن دوستانه، استفاده از ایموجی‌های 🌟✅🚀 در صورت مناسب بودن

6. **در صورت بروز باگ یا خطا:**
   - با استفاده از روش درخت-تفکر دیباگ کنید
   - هرگز به صورت خاموش حدس نزنید — از محمدرضا برای تأیید بپرسید

## 📋 قوانین ماژول‌ها

### 🤖 لایه ربات تلگرام
- `bot/commands/` - فقط دریافت ورودی کاربر و فراخوانی سرویس‌ها
- `bot/callbacks/` - پردازش کال‌بک‌های دکمه‌های اینلاین
- `bot/buttons/` - ایجاد و سازماندهی دکمه‌های اینلاین
- منطق کسب‌وکار متعلق به سرویس‌ها است، نه در هندلرهای ربات

### 🧠 لایه سرویس‌ها
- سرویس‌ها باید بدون حالت و در صورت امکان همگام پذیر باشند
- سرویس‌ها باید از ریپوزیتوری‌ها برای دسترسی به داده استفاده کنند
- سرویس‌ها مسئول اعتبارسنجی، قوانین کسب‌وکار و هماهنگی هستند
- عملیات پیچیده باید هنگام دست زدن به چندین جدول تراکنشی باشند

### 🗄️ لایه پایگاه داده
- کلاس‌های مدل باید ساختارهای داده خالص بدون منطق کسب‌وکار باشند
- تمام دسترسی‌های پایگاه داده باید از طریق ریپوزیتوری‌ها باشد
- برای پرس‌وجوهای پیچیده از SQLAlchemy core استفاده کنید
- همیشه برای تغییرات طرح، مهاجرت ایجاد کنید

### 💰 سیستم پرداخت
- تمام جابجایی‌های پول باید در جدول transactions ثبت شوند
- موجودی هرگز مستقیماً ذخیره نمی‌شود - همیشه از تاریخچه تراکنش محاسبه می‌شود
- رسیدها باید کدهای پیگیری منحصر به فرد داشته باشند (`RCPT-YYMMDD-XYZ`)
- تأیید رسید باید با شناسه مدیر و زمان ثبت شود

### 🔒 مدیریت حساب VPN
- نام‌های مشتری باید از الگوی `{LOCATION}-Moonvpn-{ID}` پیروی کنند
- ترافیک حساب و انقضا در هر دو پنل و پایگاه داده پیگیری می‌شود
- جابجایی بین مکان‌ها نیاز به سوابق انتقال مناسب دارد
- سلامت و ظرفیت ورودی به طور منظم از پنل‌ها همگام‌سازی می‌شود

## 🛠️ جریان توسعه
1. تغییرات کد در محیط توسعه انجام می‌شود
2. تست‌ها با استفاده از `moonvpn test` اجرا می‌شوند
3. در صورت نیاز مهاجرت پایگاه داده ایجاد می‌شود
4. سرویس‌ها با `moonvpn restart` راه‌اندازی مجدد می‌شوند
5. تغییرات در محیط مستقر شده اعتبارسنجی می‌شوند

## 🧪 اصول تست
- منطق کسب‌وکار اصلی باید پوشش تستی داشته باشد
- تست‌ها باید منزوی باشند و به سرویس‌های خارجی متکی نباشند
- از موک‌ها و فیکسچرها برای وابستگی‌ها استفاده کنید
- هم موارد موفقیت و هم موارد شکست را آزمایش کنید

## 📢 ارتباط با توسعه‌دهنده
- با محمدرضا به زبان فارسی صحبت کنید
- از لحن دوستانه با ایموجی‌های مناسب استفاده کنید
- واضح، مستقیم و هدفمند باشید
- بر پیاده‌سازی راه‌حل به جای تئوری تمرکز کنید
- ملاحظات فنی مهم را برجسته کنید

## 🔄 اصول عمل
- قبل از ایجاد چیز جدید، **همیشه کدبیس را جستجو کنید**
- برای تعیین مکان و نام فایل صحیح، **همیشه `project-structure.md` را مشورت کنید**
- هر تغییری باید بر اساس **الگوی موجود** باشد (DRY: Don't Repeat Yourself)
- دسترسی به داده باید فقط از طریق ریپوزیتوری‌ها و سرویس‌ها انجام شود - هرگز مستقیماً از ربات به مدل‌ها دسترسی نداشته باشید
- هر درخواست را به عنوان یک ویژگی سطح تولید در نظر بگیرید، مگر اینکه صراحتاً خلاف آن بیان شود
- برای هر منطق قابل توجهی که در `core/services` یا `db` اضافه می‌شود، **پوشش تست** فراهم کنید

## 🧩 نکات نهایی
- هر تغییر باید آزمایش شده و پایدار باشد
- همیشه ابتدا ساختار موجود را برای درک نحوه پیاده‌سازی فعلی بررسی کنید
- کد نوشته شده باید خوانا، قابل نگهداری و مطابق با استانداردهای پروژه باشد
- همه خروجی‌ها و توضیحات برای کاربر باید به فارسی باشد

---

مهم‌ترین اصل: بدنه اصلی ربات در `bot/main.py`، خدمات اصلی در `core/services/`، و مدل‌های پایگاه داده در `db/models/` قرار دارند. همیشه قبل از شروع پیاده‌سازی، این فایل‌ها را برای درک جریان کار فعلی بررسی کنید. 