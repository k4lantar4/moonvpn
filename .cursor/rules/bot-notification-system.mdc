---
description: MoonVPN Notification System Guide
globs: 
alwaysApply: false
---
# üì¢ MoonVPN Notification System Guide

## üìù Notification Components
The notification system consists of:

- [NotificationService](mdc:core/services/notification_service.py) - Core notification logic
- [Notification Module](mdc:bot/notifications) - Bot-specific notification handling
- [NotificationLog Model](mdc:db/models/notification_log.py) - Notification logging

## üß± Notification Types
MoonVPN supports various notification types:

1. **User Notifications**
   - Account expiry warnings
   - Low balance alerts
   - Purchase confirmations
   - Receipt status updates

2. **Admin Notifications**
   - New receipt submissions
   - Order fulfillment issues
   - Panel health alerts
   - System status reports

3. **System Notifications**
   - Error reports
   - Synchronization results
   - Database migration results

## ‚úÖ Notification Rules
1. All notifications must be logged in the database
2. Notifications should support queuing for reliability
3. Failure handling must be robust (retry logic)
4. Messages should be templated for consistency
5. User notifications must be in Persian
6. Admin notifications should include actionable details

## üß© Notification Pattern
```python
# SERVICE LAYER: Sending notification
async def send_user_notification(self, user_id, notification_type, **params):
    # 1. Get user
    user = await self.user_repository.get_by_id(user_id)
    if not user:
        raise UserNotFoundException(f"User {user_id} not found")
    
    # 2. Get template based on type
    template = self.get_template(notification_type)
    
    # 3. Format message with params
    message = template.format(**params)
    
    # 4. Send via appropriate channel (Telegram)
    try:
        result = await self.bot_client.send_message(user.telegram_id, message)
        status = "sent"
    except Exception as e:
        result = None
        status = "failed"
        self.logger.error(f"Failed to send notification: {str(e)}")
    
    # 5. Log notification
    await self.notification_repository.create({
        "user_id": user_id,
        "type": notification_type,
        "channel": "telegram",
        "content": message,
        "status": status,
        "sent_at": datetime.now()
    })
    
    return result
```

## üìä Bulk Notification Handling
For sending notifications to multiple users:

1. Create notification batch with recipients
2. Process in chunks to avoid rate limits
3. Track success/failure for each recipient
4. Provide summary statistics
5. Implement retry for failed notifications

## üîÑ Admin Channel Notifications
Special handling for admin notifications:

1. Determine appropriate admin channel
2. Format with actionable information
3. Include inline buttons for admin actions
4. Track admin responses and actions
5. Update notification status based on admin actions

## ‚öôÔ∏è Configuration Options
- Template customization
- Notification frequency limits
- Default channels
- Queue processing settings
- Retry policy
- Time zone handling
