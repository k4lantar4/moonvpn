"""initial_schema_generation_final

Revision ID: 5821b73312a3
Revises: 
Create Date: 2025-04-25 05:33:14.520245+03:30

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5821b73312a3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('discount_codes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('code', sa.String(length=50), nullable=False),
    sa.Column('type', sa.Enum('PERCENT', 'FIXED', name='discounttype'), nullable=False),
    sa.Column('value', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('usage_limit', sa.Integer(), nullable=False),
    sa.Column('used_count', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('max_discount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('min_order', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_discount_codes')),
    sa.UniqueConstraint('code', name=op.f('uq_discount_codes_code'))
    )
    op.create_table('panels',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('location_name', sa.String(length=100), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('type', sa.Enum('XUI', name='paneltype'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'DISABLED', 'DELETED', name='panelstatus'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_panels'))
    )
    op.create_table('settings',
    sa.Column('key', sa.String(length=255), nullable=False),
    sa.Column('value', sa.Text(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('scope', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('key', name=op.f('pk_settings'))
    )
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('username', sa.String(length=255), nullable=True),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('role', sa.Enum('USER', 'ADMIN', 'SELLER', name='userrole'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'BLOCKED', name='userstatus'), nullable=False),
    sa.Column('settings', sa.JSON(), nullable=True),
    sa.Column('balance', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_telegram_id'), 'users', ['telegram_id'], unique=True)
    op.create_table('bank_cards',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('card_number', sa.String(length=16), nullable=False),
    sa.Column('holder_name', sa.String(length=255), nullable=False),
    sa.Column('bank_name', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('rotation_policy', sa.Enum('MANUAL', 'INTERVAL', 'LOAD_BALANCE', name='rotationpolicy'), nullable=False),
    sa.Column('rotation_interval_minutes', sa.Integer(), nullable=True),
    sa.Column('telegram_channel_id', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('admin_user_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['admin_user_id'], ['users.id'], name=op.f('fk_bank_cards_admin_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bank_cards'))
    )
    op.create_table('inbound',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('panel_id', sa.Integer(), nullable=False),
    sa.Column('remote_id', sa.Integer(), nullable=False),
    sa.Column('protocol', sa.String(length=50), nullable=False),
    sa.Column('tag', sa.String(length=100), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False),
    sa.Column('settings_json', sa.JSON(), nullable=True),
    sa.Column('sniffing', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'DISABLED', 'DELETED', name='inboundstatus'), nullable=False),
    sa.Column('max_clients', sa.Integer(), nullable=True),
    sa.Column('last_synced', sa.DateTime(), nullable=True),
    sa.Column('listen', sa.String(length=100), nullable=True),
    sa.Column('stream_settings', sa.JSON(), nullable=True),
    sa.Column('allocate_settings', sa.JSON(), nullable=True),
    sa.Column('receive_original_dest', sa.Boolean(), nullable=True),
    sa.Column('allow_transparent', sa.Boolean(), nullable=True),
    sa.Column('security_settings', sa.JSON(), nullable=True),
    sa.Column('remark', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['panel_id'], ['panels.id'], name=op.f('fk_inbound_panel_id_panels'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_inbound'))
    )
    op.create_index(op.f('ix_inbound_panel_id'), 'inbound', ['panel_id'], unique=False)
    op.create_table('notification_logs',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('type', sa.Enum('RECEIPT', 'ORDER', 'EXPIRY', 'BALANCE', 'SYSTEM', name='notificationtype'), nullable=False),
    sa.Column('channel', sa.Enum('TELEGRAM', 'EMAIL', 'SMS', name='notificationchannel'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'SENT', 'FAILED', name='notificationstatus'), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('summary', sa.JSON(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_notification_logs_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_notification_logs'))
    )
    op.create_table('plans',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='شناسه پلن'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='نام پلن'),
    sa.Column('description', sa.Text(), nullable=True, comment='توضیحات پلن'),
    sa.Column('traffic_gb', sa.Integer(), nullable=False, comment='حجم ترافیک به گیگابایت'),
    sa.Column('duration_days', sa.Integer(), nullable=False, comment='مدت اعتبار به روز'),
    sa.Column('price', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='قیمت'),
    sa.Column('available_locations', sa.JSON(), nullable=True, comment='لیست لوکیشن\u200cهای مجاز'),
    sa.Column('created_by_id', sa.BigInteger(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='planstatus'), nullable=False, comment='آیا پلن فعال است؟'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='زمان ایجاد'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_plans_created_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plans'))
    )
    op.create_index(op.f('ix_plans_name'), 'plans', ['name'], unique=False)
    op.create_table('client_accounts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('panel_id', sa.Integer(), nullable=False),
    sa.Column('inbound_id', sa.Integer(), nullable=False),
    sa.Column('remote_uuid', sa.String(length=36), nullable=False),
    sa.Column('client_name', sa.String(length=255), nullable=False),
    sa.Column('email_name', sa.String(length=255), nullable=True),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('traffic_limit', sa.Integer(), nullable=False),
    sa.Column('traffic_used', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'EXPIRED', 'DISABLED', 'SWITCHED', name='accountstatus'), nullable=False),
    sa.Column('config_url', sa.Text(), nullable=True),
    sa.Column('qr_code_path', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['inbound_id'], ['inbound.id'], name=op.f('fk_client_accounts_inbound_id_inbound'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['panel_id'], ['panels.id'], name=op.f('fk_client_accounts_panel_id_panels')),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name=op.f('fk_client_accounts_plan_id_plans')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_client_accounts_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_client_accounts'))
    )
    op.create_table('test_account_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name=op.f('fk_test_account_log_plan_id_plans')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_test_account_log_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_test_account_log'))
    )
    op.create_table('account_transfers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('old_account_id', sa.Integer(), nullable=False),
    sa.Column('new_account_id', sa.Integer(), nullable=False),
    sa.Column('from_panel_id', sa.Integer(), nullable=False),
    sa.Column('to_panel_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['from_panel_id'], ['panels.id'], name=op.f('fk_account_transfers_from_panel_id_panels')),
    sa.ForeignKeyConstraint(['new_account_id'], ['client_accounts.id'], name=op.f('fk_account_transfers_new_account_id_client_accounts')),
    sa.ForeignKeyConstraint(['old_account_id'], ['client_accounts.id'], name=op.f('fk_account_transfers_old_account_id_client_accounts')),
    sa.ForeignKeyConstraint(['to_panel_id'], ['panels.id'], name=op.f('fk_account_transfers_to_panel_id_panels')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_account_transfers'))
    )
    op.create_table('client_renewal_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('time_added', sa.Integer(), nullable=True),
    sa.Column('data_added', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client_accounts.id'], name=op.f('fk_client_renewal_logs_client_id_client_accounts')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_client_renewal_logs_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_client_renewal_logs'))
    )
    op.create_index('ix_client_renewal_log_client_id', 'client_renewal_logs', ['client_id'], unique=False)
    op.create_index('ix_client_renewal_log_created_at', 'client_renewal_logs', ['created_at'], unique=False)
    op.create_index('ix_client_renewal_log_user_id', 'client_renewal_logs', ['user_id'], unique=False)
    op.create_table('orders',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('location_name', sa.String(length=100), nullable=False),
    sa.Column('client_account_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('final_amount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('discount_code_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PAID', 'COMPLETED', 'FAILED', 'EXPIRED', name='orderstatus'), nullable=False),
    sa.Column('receipt_required', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('fulfilled_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['client_account_id'], ['client_accounts.id'], name=op.f('fk_orders_client_account_id_client_accounts')),
    sa.ForeignKeyConstraint(['discount_code_id'], ['discount_codes.id'], name=op.f('fk_orders_discount_code_id_discount_codes')),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name=op.f('fk_orders_plan_id_plans')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_orders_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_orders'))
    )
    op.create_table('transactions',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('related_order_id', sa.BigInteger(), nullable=True),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('type', sa.Enum('DEPOSIT', 'PURCHASE', 'REFUND', name='transactiontype'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'SUCCESS', 'FAILED', name='transactionstatus'), nullable=False),
    sa.Column('gateway', sa.String(length=100), nullable=True),
    sa.Column('reference', sa.String(length=255), nullable=True),
    sa.Column('tracking_code', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['related_order_id'], ['orders.id'], name=op.f('fk_transactions_related_order_id_orders')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_transactions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_transactions')),
    sa.UniqueConstraint('tracking_code', name=op.f('uq_transactions_tracking_code'))
    )
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    op.create_index(op.f('ix_transactions_related_order_id'), 'transactions', ['related_order_id'], unique=False)
    op.create_index(op.f('ix_transactions_user_id'), 'transactions', ['user_id'], unique=False)
    op.create_table('receipt_log',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('text_reference', sa.Text(), nullable=True),
    sa.Column('photo_file_id', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'EXPIRED', name='receiptstatus'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('is_flagged', sa.Boolean(), nullable=False),
    sa.Column('tracking_code', sa.String(length=50), nullable=False),
    sa.Column('auto_detected_amount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('auto_validated', sa.Boolean(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(), nullable=False),
    sa.Column('responded_at', sa.DateTime(), nullable=True),
    sa.Column('telegram_message_id', sa.BigInteger(), nullable=True),
    sa.Column('telegram_channel_id', sa.BigInteger(), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('order_id', sa.BigInteger(), nullable=True),
    sa.Column('transaction_id', sa.BigInteger(), nullable=True),
    sa.Column('card_id', sa.BigInteger(), nullable=False),
    sa.Column('admin_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name=op.f('fk_receipt_log_admin_id_users')),
    sa.ForeignKeyConstraint(['card_id'], ['bank_cards.id'], name=op.f('fk_receipt_log_card_id_bank_cards')),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name=op.f('fk_receipt_log_order_id_orders')),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], name=op.f('fk_receipt_log_transaction_id_transactions')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_receipt_log_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_receipt_log')),
    sa.UniqueConstraint('tracking_code', name=op.f('uq_receipt_log_tracking_code'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('receipt_log')
    op.drop_index(op.f('ix_transactions_user_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_related_order_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_table('transactions')
    op.drop_table('orders')
    op.drop_index('ix_client_renewal_log_user_id', table_name='client_renewal_logs')
    op.drop_index('ix_client_renewal_log_created_at', table_name='client_renewal_logs')
    op.drop_index('ix_client_renewal_log_client_id', table_name='client_renewal_logs')
    op.drop_table('client_renewal_logs')
    op.drop_table('account_transfers')
    op.drop_table('test_account_log')
    op.drop_table('client_accounts')
    op.drop_index(op.f('ix_plans_name'), table_name='plans')
    op.drop_table('plans')
    op.drop_table('notification_logs')
    op.drop_index(op.f('ix_inbound_panel_id'), table_name='inbound')
    op.drop_table('inbound')
    op.drop_table('bank_cards')
    op.drop_index(op.f('ix_users_telegram_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('settings')
    op.drop_table('panels')
    op.drop_table('discount_codes')
    # ### end Alembic commands ### 